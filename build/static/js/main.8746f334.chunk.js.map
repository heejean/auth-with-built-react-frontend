{"version":3,"sources":["stores/UserStore.js","stores/InputField.js","stores/SubmitButton.js","stores/LoginForm.js","App.js","serviceWorker.js","index.js"],"names":["extendObservable","this","loading","isLoggedIn","username","InputField","className","type","props","placeholder","value","onChange","e","target","React","Component","SubmitButton","disabled","onClick","text","LoginForm","state","password","buttonDisabled","property","val","trim","length","setState","fetch","method","headers","body","JSON","stringify","res","json","result","success","UserStore","resetForm","alert","msg","console","log","setInputValue","doLogin","App","doLogout","observer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"ySAYe,MATd,aAAe,oBACdA,YAAiBC,KAAM,CACtBC,SAAS,EACTC,YAAY,EACZC,SAAU,M,QCYEC,E,uKAfL,IAAD,OACP,OACC,yBAAKC,UAAU,cACd,2BACCA,UAAU,QACVC,KAAMN,KAAKO,MAAMD,KACjBE,YAAaR,KAAKO,MAAMC,YACxBC,MAAOT,KAAKO,MAAME,MAClBC,SAAW,SAACC,GAAD,OAAO,EAAKJ,MAAMG,SAASC,EAAEC,OAAOH,e,GAV3BI,IAAMC,WCiBhBC,E,uKAfL,IAAD,OACP,OACC,yBAAKV,UAAU,gBACd,4BACCA,UAAU,MACVW,SAAUhB,KAAKO,MAAMS,SACrBC,QAAU,kBAAM,EAAKV,MAAMU,YAE1BjB,KAAKO,MAAMW,W,GAVUL,IAAMC,WCuGlBK,E,kDAlGd,WAAYZ,GAAQ,IAAD,8BAClB,cAAMA,IACDa,MAAQ,CACZjB,SAAU,GACVkB,SAAU,GACVC,gBAAgB,GALC,E,0DASLC,EAAUC,IACvBA,EAAMA,EAAIC,QAEDC,OAAS,IAIlB1B,KAAK2B,SAAL,eACEJ,EAAWC,M,kCAKbxB,KAAK2B,SAAS,CACbxB,SAAU,GACVkB,SAAU,GACVC,gBAAgB,M,qJAMZtB,KAAKoB,MAAMjB,S,oDAIXH,KAAKoB,MAAMC,S,wDAIhBrB,KAAK2B,SAAS,CACbL,gBAAgB,I,kBAIAM,MAAM,SAAU,CAC/BC,OAAQ,OACRC,QAAS,CACR,OAAU,mBACV,eAAgB,oBAEjBC,KAAMC,KAAKC,UAAU,CACpB9B,SAAUH,KAAKoB,MAAMjB,SACrBkB,SAAUrB,KAAKoB,MAAMC,a,cARnBa,E,iBAYeA,EAAIC,O,SAAnBC,E,SACWA,EAAOC,SACrBC,EAAUpC,YAAa,EACvBoC,EAAUnC,SAAWiC,EAAOjC,UACjBiC,IAA6B,IAAnBA,EAAOC,UAC5BrC,KAAKuC,YACLC,MAAMJ,EAAOK,M,kDAKdC,QAAQC,IAAR,MACA3C,KAAKuC,Y,+IAIE,IAAD,OACP,OACC,yBAAKlC,UAAU,aAAf,SAEC,kBAAC,EAAD,CACCC,KAAK,OACLE,YAAY,WACZC,MAAOT,KAAKoB,MAAMjB,SAAWH,KAAKoB,MAAMjB,SAAW,GACnDO,SAAW,SAACc,GAAD,OAAS,EAAKoB,cAAc,WAAYpB,MAEpD,kBAAC,EAAD,CACClB,KAAK,WACLE,YAAY,WACZC,MAAOT,KAAKoB,MAAMC,SAAWrB,KAAKoB,MAAMC,SAAW,GACnDX,SAAW,SAACc,GAAD,OAAS,EAAKoB,cAAc,WAAYpB,MAEpD,kBAAC,EAAD,CACCN,KAAK,QACLF,SAAUhB,KAAKoB,MAAME,eACrBL,QAAU,kBAAM,EAAK4B,kB,GA7FFhC,IAAMC,WCExBgC,G,mUAKalB,MAAM,cAAe,CACpCC,OAAQ,OACRC,QAAS,CACR,OAAU,mBACV,eAAgB,sB,cAJdI,E,gBAQeA,EAAIC,O,QAAnBC,E,SAEWA,EAAOC,SACrBC,EAAUrC,SAAU,EACpBqC,EAAUpC,YAAa,EACvBoC,EAAUnC,SAAWiC,EAAOjC,WAE5BmC,EAAUrC,SAAU,EACpBqC,EAAUpC,YAAa,G,kDAKxBoC,EAAUrC,SAAU,EACpBqC,EAAUpC,YAAa,E,4RAOP0B,MAAM,UAAW,CAChCC,OAAQ,OACRC,QAAS,CACR,OAAU,mBACV,eAAgB,sB,cAJdI,E,gBAQeA,EAAIC,O,QAAnBC,E,SAEWA,EAAOC,UACrBC,EAAUpC,YAAa,EACvBoC,EAAUnC,SAAW,I,kDAKtBuC,QAAQC,IAAR,M,+IAIO,IAAD,OAEP,OAAKL,EAAUrC,QAEb,yBAAKI,UAAU,OACd,yBAAKA,UAAU,aAAf,4BAMGiC,EAAUpC,WAEb,yBAAKG,UAAU,OACd,yBAAKA,UAAU,aAAf,WACUiC,EAAUnC,SAEnB,kBAAC,EAAD,CACCe,KAAM,UACNF,UAAU,EACVC,QAAU,kBAAI,EAAK8B,gBASvB,yBAAK1C,UAAU,OACd,yBAAKA,UAAU,aACd,kBAAC,EAAD,Y,GAtFYQ,IAAMC,YAgGTkC,cAASF,GC3FJG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.8746f334.chunk.js","sourcesContent":["import { extendObservable } from 'mobx';\n\nclass UserStore {\n\tconstructor() {\n\t\textendObservable(this, {\n\t\t\tloading: true,\n\t\t\tisLoggedIn: false,\n\t\t\tusername: ''\n\t\t});\n\t}\n}\n\nexport default new UserStore();\n","import React from 'react';\n\nclass InputField extends React.Component {\n\n\trender(){\n\t\treturn (\n\t\t\t<div className=\"inputField\">\n\t\t\t\t<input\n\t\t\t\t\tclassName='input'\n\t\t\t\t\ttype={this.props.type}\n\t\t\t\t\tplaceholder={this.props.placeholder}\n\t\t\t\t\tvalue={this.props.value}\n\t\t\t\t\tonChange={ (e) => this.props.onChange(e.target.value) }\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default InputField;\n","import React from 'react';\n\nclass SubmitButton extends React.Component {\n\n\trender(){\n\t\treturn (\n\t\t\t<div className=\"submitButton\">\n\t\t\t\t<button\n\t\t\t\t\tclassName='btn'\n\t\t\t\t\tdisabled={this.props.disabled}\n\t\t\t\t\tonClick={ () => this.props.onClick() }\n\t\t\t\t>\n\t\t\t\t\t{this.props.text}\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default SubmitButton;\n","import React from 'react';\nimport InputField from './InputField';\nimport SubmitButton from './SubmitButton';\nimport UserStore from './UserStore.js';\n\nclass LoginForm extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tusername: '',\n\t\t\tpassword: '',\n\t\t\tbuttonDisabled: false\n\t\t}\n\t}\n\n\tsetInputValue(property, val){\n\t\tval = val.trim();\n\n\t\tif ( val.length > 12 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState({\n\t\t\t[property]: val\n\t\t})\n\t}\n\n\tresetForm() {\n\t\tthis.setState({\n\t\t\tusername: '',\n\t\t\tpassword: '',\n\t\t\tbuttonDisabled: false\n\t\t})\n\t}\n\n\tasync doLogin() {\n\n\t\tif (!this.state.username) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.state.password) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState({\n\t\t\tbuttonDisabled: true\n\t\t})\n\n\t\ttry {\n\t\t\tlet res = await fetch('/login', {\n\t\t\t\tmethod: 'post',\n\t\t\t\theaders: {\n\t\t\t\t\t'Accept': 'application/json',\n\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\tusername: this.state.username,\n\t\t\t\t\tpassword: this.state.password\n\t\t\t\t})\n\t\t\t});\n\n\t\t\tlet result = await res.json();\n\t\t\tif ( result && result.success ) {\n\t\t\t\tUserStore.isLoggedIn = true;\n\t\t\t\tUserStore.username = result.username;\n\t\t\t} else if ( result && result.success === false ) {\n\t\t\t\tthis.resetForm();\n\t\t\t\talert(result.msg);\n\t\t\t}\n\t\t}\n\n\t\tcatch(e) {\n\t\t\tconsole.log(e);\n\t\t\tthis.resetForm();\n\t\t}\n\t}\n\n\trender(){\n\t\treturn (\n\t\t\t<div className=\"loginForm\">\n\t\t\t\tLog in\t\n\t\t\t\t<InputField\n\t\t\t\t\ttype='text'\n\t\t\t\t\tplaceholder='Username'\n\t\t\t\t\tvalue={this.state.username ? this.state.username : ''}\n\t\t\t\t\tonChange={ (val) => this.setInputValue('username', val) }\n\t\t\t\t/>\n\t\t\t\t<InputField\n\t\t\t\t\ttype='password'\n\t\t\t\t\tplaceholder='Password'\n\t\t\t\t\tvalue={this.state.password ? this.state.password : ''}\n\t\t\t\t\tonChange={ (val) => this.setInputValue('password', val) }\n\t\t\t\t/>\n\t\t\t\t<SubmitButton\n\t\t\t\t\ttext='Login'\n\t\t\t\t\tdisabled={this.state.buttonDisabled}\n\t\t\t\t\tonClick={ () => this.doLogin() }\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default LoginForm;\n","import React from 'react';\nimport { observer } from 'mobx-react';\nimport UserStore from './stores/UserStore'; \nimport LoginForm from './stores/LoginForm'; \nimport SubmitButton from './stores/SubmitButton'; \nimport './App.css';\n\nclass App extends React.Component {\n\n\tasync componentDidMount() {\n\n\t\ttry {\n\t\t\tlet res = await fetch('/isLoggedIn', {\n\t\t\t\tmethod: 'post',\n\t\t\t\theaders: {\n\t\t\t\t\t'Accept': 'application/json',\n\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tlet result = await res.json();\n\n\t\t\tif ( result && result.success ){\n\t\t\t\tUserStore.loading = false;\n\t\t\t\tUserStore.isLoggedIn = true;\n\t\t\t\tUserStore.username = result.username;\n\t\t\t} else {\n\t\t\t\tUserStore.loading = false;\n\t\t\t\tUserStore.isLoggedIn = false;\n\t\t\t}\n\t\t}\n\n\t\tcatch(e){\n\t\t\tUserStore.loading = false;\n\t\t\tUserStore.isLoggedIn = false;\n\t\t}\n\t}\n\n\tasync doLogout() {\n\n\t\ttry {\n\t\t\tlet res = await fetch('/logout', {\n\t\t\t\tmethod: 'post',\n\t\t\t\theaders: {\n\t\t\t\t\t'Accept': 'application/json',\n\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tlet result = await res.json();\n\n\t\t\tif ( result && result.success ){\n\t\t\t\tUserStore.isLoggedIn = false;\n\t\t\t\tUserStore.username = '';\n\t\t\t}\n\t\t}\n\n\t\tcatch(e){\n\t\t\tconsole.log(e);\n\t\t}\n\t}\n\n\trender(){\n\n\t\tif ( UserStore.loading ){\n\t\t\treturn(\n\t\t\t\t<div className=\"app\">\n\t\t\t\t\t<div className='container'>\n\t\t\t\t\t\tLoading, please wait...\t\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t} else {\n\t\t\tif ( UserStore.isLoggedIn ) {\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"app\">\n\t\t\t\t\t\t<div className='container'>\n\t\t\t\t\t\t\tWelcome {UserStore.username}\n\n\t\t\t\t\t\t\t<SubmitButton\n\t\t\t\t\t\t\t\ttext={'Log out'}\n\t\t\t\t\t\t\t\tdisabled={false}\n\t\t\t\t\t\t\t\tonClick={ ()=>this.doLogout() }\n\t\t\t\t\t\t\t\t//onClick={ ()=>this.logout() }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn (\n\t\t\t\t<div className=\"app\">\n\t\t\t\t\t<div className='container'>\n\t\t\t\t\t\t<LoginForm />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\t\n\t}\n}\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}